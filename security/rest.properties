# Default REST security configuration.
#
# By default this configuration locks down every rest call. The following is an example of a more
# lax configuration in which read only (GET) access is allowed anonymously:
#
#/**;GET=IS_AUTHENTICATED_ANONYMOUSLY
#/**;POST,DELETE,PUT=ADMIN
#
# The following is an example of a configuration that could be used with the restconfig plugin in
# which only configuration in a specific workspace is restricted:
#
#/rest/workspaces/topp*;GET=ADMIN
#/rest/workspaces/topp/**;GET=ADMIN
#/**;POST,DELETE,PUT=ADMIN
#
#
/rest/process/batchdownload/download/*;GET=IS_AUTHENTICATED_ANONYMOUSLY

# the following are allowed so that clients have a way to find out if a particular layer is
# backed by geogit. Ideally, we would like the getCapabilities request include a metadata
# specifying the geogit endpoint corresponding to a layer so that we don't need the rest endpoint.
# Note that only the __specific__ rest endpoint that are actually needed are exposed to ROLE_ANONYMOUS
# and IS_AUTHENTICATED_ANONYMOUSLY (which includes both authenticated admin and non-admin). An
# edge case to keep in mind is that a remote server might want to expose a geogit layer publically and
# allow anyone to edit its data anonymously or logged in. making sure the needed rest endpoints are
# accessible by ROLE_ANONYMOUS will allow such layer. otherwise, they would still be asked to
# authenticate on a remote for which they do not have any credentials.
/rest/layers/*;GET=ROLE_ANONYMOUS,IS_AUTHENTICATED_ANONYMOUSLY
/rest/workspaces/*/datastores/*;GET=ROLE_ANONYMOUS,IS_AUTHENTICATED_ANONYMOUSLY
/rest/workspaces/*/datastores/*/featuretypes/*;GET=ROLE_ANONYMOUS,IS_AUTHENTICATED_ANONYMOUSLY

/geogit**;GET,POST,DELETE,PUT=IS_AUTHENTICATED_ANONYMOUSLY
/geogit/**;GET,POST,DELETE,PUT=IS_AUTHENTICATED_ANONYMOUSLY

/**;GET=ROLE_ADMINISTRATOR
/**;POST,DELETE,PUT=ROLE_ADMINISTRATOR
